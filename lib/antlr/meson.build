# Lots of source files, so put this aside to keep the main meson.build clean

antlr_rt_dir = 'Cpp-runtime/runtime/src'
antlr_lib = shared_library('antlr4',
  antlr_rt_dir + '/ANTLRErrorListener.cpp',
  antlr_rt_dir + '/ANTLRErrorStrategy.cpp',
  antlr_rt_dir + '/ANTLRFileStream.cpp',
  antlr_rt_dir + '/ANTLRInputStream.cpp',
  antlr_rt_dir + '/atn/ActionTransition.cpp',
  antlr_rt_dir + '/atn/AmbiguityInfo.cpp',
  antlr_rt_dir + '/atn/ArrayPredictionContext.cpp',
  antlr_rt_dir + '/atn/ATNConfig.cpp',
  antlr_rt_dir + '/atn/ATNConfigSet.cpp',
  antlr_rt_dir + '/atn/ATN.cpp',
  antlr_rt_dir + '/atn/ATNDeserializationOptions.cpp',
  antlr_rt_dir + '/atn/ATNDeserializer.cpp',
  antlr_rt_dir + '/atn/ATNSimulator.cpp',
  antlr_rt_dir + '/atn/ATNState.cpp',
  antlr_rt_dir + '/atn/ATNStateType.cpp',
  antlr_rt_dir + '/atn/AtomTransition.cpp',
  antlr_rt_dir + '/atn/ContextSensitivityInfo.cpp',
  antlr_rt_dir + '/atn/DecisionEventInfo.cpp',
  antlr_rt_dir + '/atn/DecisionInfo.cpp',
  antlr_rt_dir + '/atn/DecisionState.cpp',
  antlr_rt_dir + '/atn/EpsilonTransition.cpp',
  antlr_rt_dir + '/atn/ErrorInfo.cpp',
  antlr_rt_dir + '/atn/LexerAction.cpp',
  antlr_rt_dir + '/atn/LexerActionExecutor.cpp',
  antlr_rt_dir + '/atn/LexerATNConfig.cpp',
  antlr_rt_dir + '/atn/LexerATNSimulator.cpp',
  antlr_rt_dir + '/atn/LexerChannelAction.cpp',
  antlr_rt_dir + '/atn/LexerCustomAction.cpp',
  antlr_rt_dir + '/atn/LexerIndexedCustomAction.cpp',
  antlr_rt_dir + '/atn/LexerModeAction.cpp',
  antlr_rt_dir + '/atn/LexerMoreAction.cpp',
  antlr_rt_dir + '/atn/LexerPopModeAction.cpp',
  antlr_rt_dir + '/atn/LexerPushModeAction.cpp',
  antlr_rt_dir + '/atn/LexerSkipAction.cpp',
  antlr_rt_dir + '/atn/LexerTypeAction.cpp',
  antlr_rt_dir + '/atn/LL1Analyzer.cpp',
  antlr_rt_dir + '/atn/LookaheadEventInfo.cpp',
  antlr_rt_dir + '/atn/NotSetTransition.cpp',
  antlr_rt_dir + '/atn/OrderedATNConfigSet.cpp',
  antlr_rt_dir + '/atn/ParseInfo.cpp',
  antlr_rt_dir + '/atn/ParserATNSimulator.cpp',
  antlr_rt_dir + '/atn/PrecedencePredicateTransition.cpp',
  antlr_rt_dir + '/atn/PredicateEvalInfo.cpp',
  antlr_rt_dir + '/atn/PredicateTransition.cpp',
  antlr_rt_dir + '/atn/PredictionContextCache.cpp',
  antlr_rt_dir + '/atn/PredictionContext.cpp',
  antlr_rt_dir + '/atn/PredictionContextMergeCache.cpp',
  antlr_rt_dir + '/atn/PredictionMode.cpp',
  antlr_rt_dir + '/atn/ProfilingATNSimulator.cpp',
  antlr_rt_dir + '/atn/RangeTransition.cpp',
  antlr_rt_dir + '/atn/RuleTransition.cpp',
  antlr_rt_dir + '/atn/SemanticContext.cpp',
  antlr_rt_dir + '/atn/SetTransition.cpp',
  antlr_rt_dir + '/atn/SingletonPredictionContext.cpp',
  antlr_rt_dir + '/atn/StarLoopbackState.cpp',
  antlr_rt_dir + '/atn/Transition.cpp',
  antlr_rt_dir + '/atn/TransitionType.cpp',
  antlr_rt_dir + '/atn/WildcardTransition.cpp',
  antlr_rt_dir + '/BailErrorStrategy.cpp',
  antlr_rt_dir + '/BaseErrorListener.cpp',
  antlr_rt_dir + '/BufferedTokenStream.cpp',
  antlr_rt_dir + '/CharStream.cpp',
  antlr_rt_dir + '/CommonToken.cpp',
  antlr_rt_dir + '/CommonTokenFactory.cpp',
  antlr_rt_dir + '/CommonTokenStream.cpp',
  antlr_rt_dir + '/ConsoleErrorListener.cpp',
  antlr_rt_dir + '/DefaultErrorStrategy.cpp',
  antlr_rt_dir + '/dfa/DFA.cpp',
  antlr_rt_dir + '/dfa/DFASerializer.cpp',
  antlr_rt_dir + '/dfa/DFAState.cpp',
  antlr_rt_dir + '/dfa/LexerDFASerializer.cpp',
  antlr_rt_dir + '/DiagnosticErrorListener.cpp',
  antlr_rt_dir + '/Exceptions.cpp',
  antlr_rt_dir + '/FailedPredicateException.cpp',
  antlr_rt_dir + '/InputMismatchException.cpp',
  antlr_rt_dir + '/InterpreterRuleContext.cpp',
  antlr_rt_dir + '/IntStream.cpp',
  antlr_rt_dir + '/Lexer.cpp',
  antlr_rt_dir + '/LexerInterpreter.cpp',
  antlr_rt_dir + '/LexerNoViableAltException.cpp',
  antlr_rt_dir + '/ListTokenSource.cpp',
  antlr_rt_dir + '/misc/InterpreterDataReader.cpp',
  antlr_rt_dir + '/misc/Interval.cpp',
  antlr_rt_dir + '/misc/IntervalSet.cpp',
  antlr_rt_dir + '/misc/MurmurHash.cpp',
  antlr_rt_dir + '/misc/Predicate.cpp',
  antlr_rt_dir + '/NoViableAltException.cpp',
  antlr_rt_dir + '/Parser.cpp',
  antlr_rt_dir + '/ParserInterpreter.cpp',
  antlr_rt_dir + '/ParserRuleContext.cpp',
  antlr_rt_dir + '/ProxyErrorListener.cpp',
  antlr_rt_dir + '/RecognitionException.cpp',
  antlr_rt_dir + '/Recognizer.cpp',
  antlr_rt_dir + '/RuleContext.cpp',
  antlr_rt_dir + '/RuleContextWithAltNum.cpp',
  antlr_rt_dir + '/RuntimeMetaData.cpp',
  antlr_rt_dir + '/support/Any.cpp',
  antlr_rt_dir + '/support/Arrays.cpp',
  antlr_rt_dir + '/support/CPPUtils.cpp',
  antlr_rt_dir + '/support/StringUtils.cpp',
  antlr_rt_dir + '/support/Utf8.cpp',
  antlr_rt_dir + '/Token.cpp',
  antlr_rt_dir + '/TokenSource.cpp',
  antlr_rt_dir + '/TokenStream.cpp',
  antlr_rt_dir + '/TokenStreamRewriter.cpp',
  antlr_rt_dir + '/tree/ErrorNodeImpl.cpp',
  antlr_rt_dir + '/tree/IterativeParseTreeWalker.cpp',
  antlr_rt_dir + '/tree/ParseTree.cpp',
  antlr_rt_dir + '/tree/ParseTreeListener.cpp',
  antlr_rt_dir + '/tree/ParseTreeVisitor.cpp',
  antlr_rt_dir + '/tree/ParseTreeWalker.cpp',
  antlr_rt_dir + '/tree/pattern/Chunk.cpp',
  antlr_rt_dir + '/tree/pattern/ParseTreeMatch.cpp',
  antlr_rt_dir + '/tree/pattern/ParseTreePattern.cpp',
  antlr_rt_dir + '/tree/pattern/ParseTreePatternMatcher.cpp',
  antlr_rt_dir + '/tree/pattern/RuleTagToken.cpp',
  antlr_rt_dir + '/tree/pattern/TagChunk.cpp',
  antlr_rt_dir + '/tree/pattern/TextChunk.cpp',
  antlr_rt_dir + '/tree/pattern/TokenTagToken.cpp',
  antlr_rt_dir + '/tree/TerminalNodeImpl.cpp',
  antlr_rt_dir + '/tree/Trees.cpp',
  antlr_rt_dir + '/tree/xpath/XPath.cpp',
  antlr_rt_dir + '/tree/xpath/XPathElement.cpp',
  antlr_rt_dir + '/tree/xpath/XPathLexer.cpp',
  antlr_rt_dir + '/tree/xpath/XPathLexerErrorListener.cpp',
  antlr_rt_dir + '/tree/xpath/XPathRuleAnywhereElement.cpp',
  antlr_rt_dir + '/tree/xpath/XPathRuleElement.cpp',
  antlr_rt_dir + '/tree/xpath/XPathTokenAnywhereElement.cpp',
  antlr_rt_dir + '/tree/xpath/XPathTokenElement.cpp',
  antlr_rt_dir + '/tree/xpath/XPathWildcardAnywhereElement.cpp',
  antlr_rt_dir + '/tree/xpath/XPathWildcardElement.cpp',
  antlr_rt_dir + '/UnbufferedCharStream.cpp',
  antlr_rt_dir + '/UnbufferedTokenStream.cpp',
  antlr_rt_dir + '/Vocabulary.cpp',
  antlr_rt_dir + '/WritableToken.cpp',

  include_directories: [antlr_rt_dir],
  override_options: ['cpp_std=c++20'],
)
antlr = declare_dependency(
  link_with: [antlr_lib],
  include_directories: [antlr_rt_dir],
)
